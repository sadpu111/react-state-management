{"ast":null,"code":"var _jsxFileName = \"/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./Api\";\nimport { useOutletContext } from \"react-router-dom\";\nimport ApexCahrt from \"react-apexcharts\"; // 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart() {\n  _s();\n\n  const {\n    coinId\n  } = useOutletContext();\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading Chart...\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ApexCahrt, {\n        type: \"line\",\n        series: [{\n          name: \"Price\",\n          data: data === null || data === void 0 ? void 0 : data.map(price => Number(price.close)) // data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n\n        }],\n        options: {\n          theme: {\n            mode: isDark ? \"dark\" : \"light\"\n          },\n          chart: {\n            height: 500,\n            width: 500,\n            toolbar: {\n              show: false\n            },\n            background: \"transparent\"\n          },\n          yaxis: {\n            title: {\n              text: \"Price($)\"\n            }\n          },\n          xaxis: {\n            type: \"datetime\",\n            categories: data === null || data === void 0 ? void 0 : data.map(date => new Date(Number(date.time_close) * 1000).toISOString()) // 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n\n          },\n          stroke: {\n            curve: \"smooth\",\n            width: 3\n          },\n          fill: {\n            type: \"gradient\",\n            gradient: {\n              gradientToColors: [\"#0be881\"],\n              stops: [1, 100]\n            }\n          },\n          colors: [\"#0fbcf9\"],\n          tooltip: {\n            y: {\n              formatter: value => `$${value.toFixed(1)}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ApexCahrt, {\n        type: \"candlestick\",\n        series: [{\n          name: \"Price\",\n          data: data === null || data === void 0 ? void 0 : data.map(props => {\n            return {\n              x: new Date(Number(props.time_open) * 1000),\n              y: [parseFloat(props.open), parseFloat(props.high), parseFloat(props.low), parseFloat(props.close)]\n            };\n          })\n        }],\n        options: {\n          theme: {\n            mode: isDark ? \"dark\" : \"light\"\n          },\n          chart: {\n            height: 500,\n            width: 500,\n            toolbar: {\n              show: false\n            },\n            background: \"transparent\"\n          },\n          yaxis: {\n            title: {\n              text: \"Price($)\"\n            }\n          },\n          xaxis: {\n            type: \"datetime\",\n            categories: data === null || data === void 0 ? void 0 : data.map(date => new Date(Number(date.time_close) * 1000).toISOString())\n          },\n          plotOptions: {\n            candlestick: {\n              colors: {\n                upward: \"#ff009d\",\n                downward: \"#0be881\"\n              }\n            }\n          },\n          tooltip: {\n            y: {\n              formatter: value => `$${value.toFixed(2)}`\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Chart, \"tsPjlIvSU9S1FNm2xWh+pMDOlxE=\", false, function () {\n  return [useOutletContext, useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useQuery","fetchCoinHistory","useOutletContext","ApexCahrt","Chart","coinId","isLoading","data","name","map","price","Number","close","theme","mode","isDark","chart","height","width","toolbar","show","background","yaxis","title","text","xaxis","type","categories","date","Date","time_close","toISOString","stroke","curve","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","props","x","time_open","parseFloat","open","high","low","plotOptions","candlestick","upward","downward"],"sources":["/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./Api\";\nimport {useOutletContext} from \"react-router-dom\"\nimport ApexCahrt from \"react-apexcharts\"; // 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \n\n\ninterface ChartProps {\n  coinId: string;\n\n}\n\ninterface IHistoricalData {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ICandleChartItem {\n  x: Date;\n  y: number[];\n}\n\n// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart() {\n  const {coinId} = useOutletContext<ChartProps>()\n  const {isLoading, data} = useQuery<IHistoricalData[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return <div>{isLoading ? \"Loading Chart...\" : <>\n    <ApexCahrt \n    type=\"line\" \n    series={[\n      {\n        name: \"Price\",\n        data: data?.map(price => Number(price.close)) as number[], // data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n      },\n    ]}\n    options={{\n      \n      theme: {\n        mode: isDark? \"dark\" : \"light\"\n      },\n      chart: {\n        height: 500,\n        width: 500,\n        toolbar: {\n          show: false,\n        },\n        background: \"transparent\",\n      },\n      yaxis: {\n        title: {\n          text: \"Price($)\"\n        }\n      },\n      \n      xaxis: {\n        \n         type: \"datetime\",\n         categories: data?.map(date => new Date(Number(date.time_close) * 1000).toISOString()) // 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 3,\n      },\n      fill : {\n        type: \"gradient\", gradient: {\n          gradientToColors: [\"#0be881\"],\n          stops: [1, 100]\n        }\n      },\n      colors: [\"#0fbcf9\"],\n      tooltip: {\n        y: {\n          formatter: (value) => `$${value.toFixed(1)}`\n        }\n      }\n    }}>\n    </ApexCahrt>\n    <hr></hr>\n    <ApexCahrt\n      type=\"candlestick\"\n      series={[\n        {\n          name: \"Price\",\n          data: data?.map((props) => {\n                  return {\n                    x: new Date(Number(props.time_open) * 1000),\n                    y: [\n                      parseFloat(props.open),\n                      parseFloat(props.high),\n                      parseFloat(props.low),\n                      parseFloat(props.close),\n                    ],\n                  };\n                }) as ICandleChartItem[],\n              },\n            ]}\n            options={{\n            \n      theme: {\n        mode: isDark? \"dark\" : \"light\"\n      },\n      chart: {\n        height: 500,\n        width: 500,\n        toolbar: {\n          show: false,\n        },\n        background: \"transparent\",\n      },\n      yaxis: {\n        title: {\n          text: \"Price($)\"\n        }\n      },\n      xaxis: {\n        type: \"datetime\",\n        categories: data?.map(date => new Date(Number(date.time_close) * 1000).toISOString())\n      },\n      plotOptions: {\n        candlestick: {\n          colors: {\n            upward: \"#ff009d\",\n            downward: \"#0be881\",\n            },\n        },\n      },\n      tooltip: {\n        y: {\n          formatter: (value) => `$${value.toFixed(2)}`,\n        },\n      },\n    }}\n   />\n\n    </>\n    \n  }\n  </div>\n}\n\nexport default Chart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}