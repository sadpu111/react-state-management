{"ast":null,"code":"import{useQuery}from\"react-query\";import{fetchCoinHistory}from\"./Api\";import{useOutletContext}from\"react-router-dom\";import ApexCahrt from\"react-apexcharts\";// 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart(){var _useOutletContext=useOutletContext(),coinId=_useOutletContext.coinId;var _useQuery=useQuery([\"ohlcv\",coinId],function(){return fetchCoinHistory(coinId);}),isLoading=_useQuery.isLoading,data=_useQuery.data;return/*#__PURE__*/_jsx(\"div\",{children:isLoading?\"Loading Chart...\":/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ApexCahrt,{type:\"line\",series:[{name:\"Price\",data:data===null||data===void 0?void 0:data.map(function(price){return Number(price.close);})// data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n}],options:{theme:{mode:\"dark\"},chart:{height:500,width:500,toolbar:{show:false},background:\"transparent\"},yaxis:{title:{text:\"Price($)\"}},xaxis:{type:\"datetime\",categories:data===null||data===void 0?void 0:data.map(function(date){return new Date(Number(date.time_close)*1000).toISOString();})// 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n},stroke:{curve:\"smooth\",width:3},fill:{type:\"gradient\",gradient:{gradientToColors:[\"#0be881\"],stops:[1,100]}},colors:[\"#0fbcf9\"],tooltip:{y:{formatter:function formatter(value){return\"$\".concat(value.toFixed(1));}}}}}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(ApexCahrt,{type:\"candlestick\",series:[{name:\"Price\",data:data===null||data===void 0?void 0:data.map(function(props){return{x:new Date(Number(props.time_open)*1000),y:[parseFloat(props.open),parseFloat(props.high),parseFloat(props.low),parseFloat(props.close)]};})}],options:{theme:{mode:\"dark\"},chart:{height:500,width:500,toolbar:{show:false},background:\"transparent\"},yaxis:{title:{text:\"Price($)\"}},xaxis:{type:\"datetime\",categories:data===null||data===void 0?void 0:data.map(function(date){return new Date(Number(date.time_close)*1000).toISOString();})},plotOptions:{candlestick:{colors:{upward:\"#ff009d\",downward:\"#0be881\"}}},tooltip:{y:{formatter:function formatter(value){return\"$\".concat(value.toFixed(2));}}}}})]})});}export default Chart;","map":{"version":3,"names":["useQuery","fetchCoinHistory","useOutletContext","ApexCahrt","Chart","coinId","isLoading","data","name","map","price","Number","close","theme","mode","chart","height","width","toolbar","show","background","yaxis","title","text","xaxis","type","categories","date","Date","time_close","toISOString","stroke","curve","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","props","x","time_open","parseFloat","open","high","low","plotOptions","candlestick","upward","downward"],"sources":["/Users/kimwoohyuk/Desktop/Nomad Coders/react-master-class/crypto-tracker/src/routes/Chart.tsx"],"sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./Api\";\nimport {useOutletContext} from \"react-router-dom\"\nimport ApexCahrt from \"react-apexcharts\"; // 공식문서에서는 Chart를 import하라고 하지만 Chart 컴포넌트와 겹치기 떄문에 ApexChart로 improt \n\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistoricalData {\n  time_open: number;\n  time_close: number;\n  open: string;\n  high: string;\n  low: string;\n  close: string;\n  volume: string;\n  market_cap: number;\n}\ninterface ICandleChartItem {\n  x: Date;\n  y: number[];\n}\n\n// useQuery<IHistoricalData[]> => data는 IHistoricalData interface의 배열\nfunction Chart() {\n  const {coinId} = useOutletContext<ChartProps>()\n  const {isLoading, data} = useQuery<IHistoricalData[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return <div>{isLoading ? \"Loading Chart...\" : <>\n    <ApexCahrt \n    type=\"line\" \n    series={[\n      {\n        name: \"Price\",\n        data: data?.map(price => Number(price.close)) as number[], // data prop은 number 타입을 받아야되는데, 못읽어올 경우 undefined가 되는 문제로 오류 발생. 그래서 후단의 as number[] 로 강제 타입 변형.\n      },\n    ]}\n    options={{\n      \n      theme: {\n        mode: \"dark\",\n      },\n      chart: {\n        height: 500,\n        width: 500,\n        toolbar: {\n          show: false,\n        },\n        background: \"transparent\",\n      },\n      yaxis: {\n        title: {\n          text: \"Price($)\"\n        }\n      },\n      \n      xaxis: {\n        \n         type: \"datetime\",\n         categories: data?.map(date => new Date(Number(date.time_close) * 1000).toISOString()) // 지금 활용하는 API의 time_close는 초단위 & string 타입이므로, 먼저 Number로 형변환 후 날짜로 변환.\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 3,\n      },\n      fill : {\n        type: \"gradient\", gradient: {\n          gradientToColors: [\"#0be881\"],\n          stops: [1, 100]\n        }\n      },\n      colors: [\"#0fbcf9\"],\n      tooltip: {\n        y: {\n          formatter: (value) => `$${value.toFixed(1)}`\n        }\n      }\n    }}>\n    </ApexCahrt>\n    <hr></hr>\n    <ApexCahrt\n      type=\"candlestick\"\n      series={[\n        {\n          name: \"Price\",\n          data: data?.map((props) => {\n                  return {\n                    x: new Date(Number(props.time_open) * 1000),\n                    y: [\n                      parseFloat(props.open),\n                      parseFloat(props.high),\n                      parseFloat(props.low),\n                      parseFloat(props.close),\n                    ],\n                  };\n                }) as ICandleChartItem[],\n              },\n            ]}\n            options={{\n            \n      theme: {\n        mode: \"dark\",\n      },\n      chart: {\n        height: 500,\n        width: 500,\n        toolbar: {\n          show: false,\n        },\n        background: \"transparent\",\n      },\n      yaxis: {\n        title: {\n          text: \"Price($)\"\n        }\n      },\n      xaxis: {\n        type: \"datetime\",\n        categories: data?.map(date => new Date(Number(date.time_close) * 1000).toISOString())\n      },\n      plotOptions: {\n        candlestick: {\n          colors: {\n            upward: \"#ff009d\",\n            downward: \"#0be881\",\n            },\n        },\n      },\n      tooltip: {\n        y: {\n          formatter: (value) => `$${value.toFixed(2)}`,\n        },\n      },\n    }}\n   />\n\n    </>\n    \n  }\n  </div>\n}\n\nexport default Chart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}